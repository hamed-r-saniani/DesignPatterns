این الگو برای این هست که ما بتونیم از کلاس هایی که واسط متفاوتی با کلاس های برنامه مون دارند استفاده کنیم و در واقع تبدیل این رو انجام بدیم که کلاینت هامون بتونن از همون واسط آشنای برنامه مون از قابلیت کلاس های دیگه استفاده کنن.

فرض کنید ما یک برنامه داریم و درون برنامه ما یک اینترفیس

IShape

وجود داره و کلاینت هامون زمانی که نیاز دارن به ترسیم اشکال گرافیکی میان از این اینترفیس استفاده میکنن خب برای این اینترفیس باید پیاده سازی هایی وجود داشته باشه و به ازای هریک از اشکال گرافیکی ما اومدیم یک کلاس

Concrete

پیاده سازی کردیم که در واقع این کلاس ها این اینترفیس رو اومدن پیاده سازی کردن مثلا برای ترسیم مربع یک کلاس مربع داریم که این اینترفیس رو پیاده سازی کرده برای مستطیل هم همینطور و کلاینت ما هرزمان که نیاز به هرکدوم از این اشکال گرافیکی داشته باشه میاد از این اینترفیس استفاده میکنه و کلا اینجوری هست که برای ترسیم هر چیزی از این اینترفیس استفاده میکنیم حال فرض کنید بعد از مدتی نیاز برنامه اینه که ما بیاییم

Text

های سه بعدی و ای چهاربعدی چاپ کنیم. خب پیاده سازی این کلاس که بتونیم متن سه بعدی چاپ کنیم روس صفحه ممکنه زمان بر و سخت باشه و به راحتی نتونیم این رو پیاده سازی کنیم اما از طرفی ممکنه ما در جعبه ابزار و یا در کلاس ها مون و  یا کتابخانه هایی که در برنامه استفاده کردیم یک کلاسی وجود داشته باشه که بتونه این کار رو برای ما انجام بده و ما میخواهیم از این استفاده کنیم به جای اینکه خودمون بریم و کلاسش ور ایجاد کنیم میاییم از این کلاس آماده استفاده میکنیم اما برای اینکه ساختار برنامه مون بهم نریزه ما میخواهیم از طریق همین اینترفیس

IShape

بتونیم متن سه بعدی رو چاپ کنیم و از طرفی هم چون کلاس متن سه بعدی متعلق به یک کتابخانه دیگه است ممکنه مال سال ها پیش باشه نوشته شده باشه و حتی ما سورسش هم در دست نداشته باشیم و نتونیم روش تغییراتی بدیم و میخواهیم از این استفاده کنیم یک راه ساده اینه که ما هرکجا نیاز به متن سه بعدی داشتیم مستقیم از کلاس متن سه بعدی نمونه ایجاد کنیم و کارمون رو راه بندازیم ولی خب این باعث آشفتگی کدها میشه و به مرور کدهای ما پیچیده میشن و نگهداری اش سخت میشه ما همه اشکال رو داریم از

IShape

ترسیم میکنیم و فقط متن سه بعدی مون داره از یک طریق دیگه پیاده سازی میشه و این باعث پیچیدگی میشه در برنامه و بعد از مدتی کد های ما پیچیدگی اشون بالاتر میره و برای اینکه ما بتونیم اون ساختار پروژه مون رو نگهداری کنیم باید بیاییم یه جوری این رو تطبیق بدیم که از طریق

IShape

از متن سه بعدی استفاده کنیم. برای این کار ما میاییم یدونه یک کلاس

Concrete

برای متن سه بعدی ایجاد میکنیم که میاد و اینترفیس

IShape

رو پیاده سازی میکنه و متد هایی که به ارث رسیده رو پیاده سازی میکنه حال به جایی اینکه در کلاس متن سه بعدی خودمون اون متن سه بعدی رو ترسیم کنیم میاییم یک نمونه از کلاسی که میخواهیم برای ترسیم استفاده کنیم درون کلاس متن سه بعدی ایجاد میکنیم و ترسیم متن رو با استفاده از اون انجام میدیم و به این صورت ما اومدیم کلاس که باید جدا استفاده میکردیم رو تبدیل کردیم به کلاسی که کلاینتمون بتونه از طریق

IShape

ازش استفاده کنه و این کلاینتی که نیاز به متن سه بعدی داره مستقیم از همین اینترفیس استفاده میکنه و کاری نداره که ای اینترفیس چطور داره این رو ترسیم میکنه.

خب کاربرد این دیزاین پترن این هست و خیلی ازش استفاده میشه و ممکنه ما حتی از کتابخانه های ثالث هم استفاده کنیم ولی بخواییم ساختار پروژه خودمون رو حفظ کنیم و مثلا نامگذاری هاش رو تغییر بدیم و بیاییم طبق ساختر کد خودمون اون رو پیاده سازی کنیم میتونیم از این دیزاین پترن استفاده کنیم.

این دیزاین پترن برای پیاده سازی اش دو روش داره:

ما میتونیم از

1-Class Adapter

و

2-Object Adapter

استفاده کنیم.

اگر زبان برنامه نویسی ما از وراثت چندگانه پشتیبانی میکنه میتونیم از روش 1 استفاده کنیم و به این صورت هست که ما در کلاس متن سه بعدی می آییم از اون کلاس مورد نظر ارث بری میکنیم و اون قابلیت ها رو براش پیاده سازی میکنیم حال فرض کنید

IShape

اینترفیس نبود و یک کلاس

Abstract

بود ما در کلاس سه بعدی باید هم

IShape

رو ارث بری کنیم و هم کلاس مورد نظر رو اما در زبان سی شارپ این قابلیت وجود نداره و ما در هر کلاس فقط میتوانیم از یک کلاس ارث بری کنیم و در زبان سی شارپ ما نمیتوانیم از روش 1 استفاده کنیم البته در زبان سی شارپ هم اگر

IShape

اینترفیس باشه میتونیم از روش 1 استفاده کنیم.

در روش 2 ما بر اساس

Object

می آییم

Adapter

رو انجام میدیم و در کلاس متن سه بعدی دیگر نیازی نیست ارث بری از کلاسی که میخواهیم از آن استفاده کنیم داشته باشیم و می آییم یک نمونه ازش ایجاد میکنیم که در واقع یک

Object

ایجاد میکنیم و درون متد های متن سه بعدی که از

IShape

بهش به ارث رسیده میآییم اون نمونه رو صدا میزنیم و اون کارها رو میگیم برامون انجام بده.

این دیزاین پترن یک دیزاین پترن ساده و قدرتمند هست که ما میتونیم برای تطبیق کلاس های دیگه به واسط برنامه خدمون استفاده کنیم.

ما در پروژه هامون به عنوان مثال یک ساختاری برای نامگذاری و استفاده از

Object

هامون داریم و زمانی که از یک کتابخانه شخص ثالث می آییم و در پروژه مون استفاده میکنیم ممکنه اون نامگذاری و اون روش استفاده اش مطابق با دامین و بیزینسش ما نباشه و ما میتونیم اینجا با استفاده از این الگو بیاییم این رو

Adapt

کنیم و طبق ساختاری که خودمون میخواییم ازشون استفاده کنیم

------------------------------------------------------------------------------------------

الگوی **Adapter** یکی از الگوهای ساختاری است که به شما کمک می‌کند تا رابط یک کلاس موجود را به رابطی که مشتری انتظار دارد تبدیل کنید. این الگو به شما اجازه می‌دهد که کلاس‌هایی با رابط‌های ناسازگار را با هم کار کنند.

### مثال ساده
فرض کنید یک کلاس داریم که اطلاعات کاربر را به صورت JSON برمی‌گرداند، اما ما نیاز داریم که این اطلاعات به صورت XML باشد. با استفاده از الگوی Adapter، می‌توانیم این تبدیل را انجام دهیم.

#### پیاده‌سازی
```csharp
using System;
using System.Xml.Linq;
using Newtonsoft.Json.Linq;

// کلاس موجود که اطلاعات کاربر را به صورت JSON برمی‌گرداند
public class JsonUserService
{
    public JObject GetUser()
    {
        return new JObject(
            new JProperty("Name", "John Doe"),
            new JProperty("Email", "john.doe@example.com")
        );
    }
}

// رابط مورد انتظار که اطلاعات کاربر را به صورت XML برمی‌گرداند
public interface IXmlUserService
{
    XElement GetUser();
}

// کلاس Adapter که JSON را به XML تبدیل می‌کند
public class XmlUserServiceAdapter : IXmlUserService
{
    private readonly JsonUserService _jsonUserService;

    public XmlUserServiceAdapter(JsonUserService jsonUserService)
    {
        _jsonUserService = jsonUserService;
    }

    public XElement GetUser()
    {
        var jsonUser = _jsonUserService.GetUser();
        return new XElement("User",
            new XElement("Name", jsonUser["Name"]),
            new XElement("Email", jsonUser["Email"])
        );
    }
}

// استفاده از الگوی Adapter
public class Program
{
    public static void Main(string[] args)
    {
        JsonUserService jsonUserService = new JsonUserService();
        IXmlUserService xmlUserService = new XmlUserServiceAdapter(jsonUserService);

        XElement userXml = xmlUserService.GetUser();
        Console.WriteLine(userXml);
    }
}
```

### توضیح ساده
1. **کلاس JsonUserService**: اطلاعات کاربر را به صورت JSON برمی‌گرداند.
2. **رابط IXmlUserService**: رابط مورد انتظار که اطلاعات کاربر را به صورت XML برمی‌گرداند.
3. **کلاس XmlUserServiceAdapter**: این کلاس JSON را به XML تبدیل می‌کند و رابط IXmlUserService را پیاده‌سازی می‌کند.
4. **استفاده از الگوی Adapter**: در برنامه اصلی، از کلاس Adapter برای تبدیل JSON به XML استفاده می‌شود.

این روش به شما کمک می‌کند تا کلاس‌هایی با رابط‌های ناسازگار را با هم کار کنند و نیاز به تغییر در کدهای موجود را کاهش می‌دهد.

